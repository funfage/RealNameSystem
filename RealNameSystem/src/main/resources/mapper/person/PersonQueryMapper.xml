<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.real.name.person.service.repository.PersonQueryMapper">

    <resultMap id="queryMap" type="com.real.name.person.entity.Person">
        <id property="personId" column="p_person_id"/>
        <result property="personName" column="person_name"/>
        <result property="subordinateCompany" column="subordinate_company"/>
        <result property="gender" column="gender"/>
        <result property="address" column="address"/>
        <result property="age" column="age"/>
        <result property="bankLinkNumber" column="bank_link_number"/>
        <result property="cardNumber" column="card_number"/>
        <result property="cellPhone" column="cell_phone"/>
        <result property="cultureLevelType" column="culture_level_type"/>
        <result property="expiryDate" column="expiry_date"/>
        <result property="grantOrg" column="grant_org"/>
        <result property="groupNo" column="group_no"/>
        <result property="hasBadMedicalHistory" column="has_bad_medical_history"/>
        <result property="hasBuyInsurance" column="has_buy_insurance"/>
        <result property="hometown" column="hometown"/>
        <result property="idCardIndex" column="id_card_index"/>
        <result property="idCardNumber" column="id_card_number"/>
        <result property="idCardType" column="id_card_type"/>
        <result property="issueCardDate" column="issue_card_date"/>
        <result property="issueCardPic" column="issue_card_pic"/>
        <result property="isTeamLeader" column="is_team_leader"/>
        <result property="joinedTime" column="joined_time"/>
        <result property="maritalStatus" column="marital_status"/>
        <result property="nation" column="nation"/>
        <result property="negativeIdCardImage" column="negative_id_card_image"/>
        <result property="payRollBankCardNumber" column="pay_roll_bank_card_number"/>
        <result property="payRollBankName" column="pay_roll_bank_name"/>
        <result property="payRollTopBankCode" column="pay_roll_top_bank_code"/>
        <result property="politicsType" column="politics_type"/>
        <result property="positiveIdCardImage" column="positive_id_card_image"/>
        <result property="specialty" column="specialty"/>
        <result property="startDate" column="start_date"/>
        <result property="suffixName" column="suffix_name"/>
        <result property="urgentLinkMan" column="urgent_link_man"/>
        <result property="urgentLinkManPhone" column="urgent_link_man_phone"/>
        <result property="workDate" column="work_date"/>
        <result property="workRole" column="work_role"/>
        <result property="workType" column="work_type"/>
        <result property="headImage" column="head_image"/>
    </resultMap>

    <sql id="personInfo">
        p.person_id as p_person_id, p.person_name, p.subordinate_company, p.gender, p.address, p.age, p.bank_link_number, p.card_number,
        p.cell_phone, p.culture_level_type, p.expiry_date, p.grant_org, p.group_no, p.has_bad_medical_history,
        p.has_buy_insurance, p.hometown, p.id_card_index, p.id_card_number, p.id_card_type, p.issue_card_date,
        p.issue_card_pic, p.is_team_leader, p.joined_time, p.marital_status, p.nation, p.negative_id_card_image,
        p.pay_roll_bank_card_number, p.pay_roll_bank_name, p.pay_roll_top_bank_code, p.politics_type, p.positive_id_card_image,
        p.specialty, p.start_date, p.suffix_name, p.urgent_link_man, p.urgent_link_man_phone, p.work_date,
        p.work_role, p.work_type
    </sql>

    <sql id="personInfoWithImage">
         p.person_id as p_person_id, p.person_name, p.subordinate_company, p.gender, p.address, p.age, p.bank_link_number, p.card_number,
        p.cell_phone, p.culture_level_type, p.expiry_date, p.grant_org, p.group_no, p.has_bad_medical_history,
        p.has_buy_insurance, p.hometown, p.id_card_index, p.id_card_number, p.id_card_type, p.issue_card_date,
        p.issue_card_pic, p.is_team_leader, p.joined_time, p.marital_status, p.nation, p.negative_id_card_image,
        p.pay_roll_bank_card_number, p.pay_roll_bank_name, p.pay_roll_top_bank_code, p.politics_type, p.positive_id_card_image,
        p.specialty, p.start_date, p.suffix_name, p.urgent_link_man, p.urgent_link_man_phone, p.work_date,
        p.work_role, p.work_type, p.head_image
    </sql>

    <select id="findAll" resultMap="queryMap">
        select
          <include refid="personInfo"/>
        from
          person p
    </select>

    <select id="findByPersonId" resultMap="queryMap">
        select
          <include refid="personInfo"/>
        from
          person p
        where
          p.person_id = #{personId}
    </select>

    <select id="findAllPersonInProjects" resultMap="queryMap">
        select
          <include refid="personInfo"/>
        from
        person p, project_detail pd
        where
          p.person_id = pd.person_id
        and
          pd.project_code
        in
        <choose>
            <when test="projectCodeList != null and projectCodeList.size() != 0">
                <foreach collection="projectCodeList" item="id" index="index" separator="," open="(" close=")">
                    #{id}
                </foreach>
            </when>
            <otherwise>
                ("")
            </otherwise>
        </choose>
    </select>

    <select id="findAllPersonNotAttendProject" resultMap="queryMap">
        select
          <include refid="personInfo"/>
        from
          person p
        where
        not EXISTS (select pd.person_id from project_detail pd where p.person_id = pd.person_id)
    </select>

    <select id="findByWorkRole" resultMap="queryMap">
        select
          <include refid="personInfo"/>
        from
          person p
        where
          p.work_role = #{workRole}
    </select>

    <select id="findByWorkRoleInProject" resultMap="queryMap">
        select
        <include refid="personInfo"/>
        from
          person p, project_detail pd
        where
          p.person_id = pd.person_id
        and
          p.work_role = #{workRole}
        and
          pd.project_code
        in
        <choose>
            <when test="projectCodeList != null and projectCodeList.size() != 0">
                <foreach collection="projectCodeList" item="id" index="index" separator="," open="(" close=")">
                    #{id}
                </foreach>
            </when>
            <otherwise>
                ("")
            </otherwise>
        </choose>
    </select>

    <select id="findByWorkRoleInUnionNotAttendProject" resultMap="queryMap">
        select
        <include refid="personInfo"/>
        from
        person p, project_detail pd
        where
        p.person_id = pd.person_id
        and
        p.work_role = #{workRole}
        and
        pd.project_code
        in
        <choose>
            <when test="projectCodeList != null and projectCodeList.size() != 0">
                <foreach collection="projectCodeList" item="id" index="index" separator="," open="(" close=")">
                    #{id}
                </foreach>
            </when>
            <otherwise>
                ("")
            </otherwise>
        </choose>
        union
        select
          <include refid="personInfo"/>
        from
          person p
        where
          not EXISTS (select pd.person_id from project_detail pd where p.person_id = pd.person_id)
    </select>

    <select id="findByIdCardNumber" parameterType="string" resultMap="queryMap">
        select
          <include refid="personInfo"/>
        from
          person p
        where
          p.id_card_number = #{idCardNum}
    </select>

    <select id="findByPersonIdIn" resultMap="queryMap">
        select
          <include refid="personInfo"/>
        from
          person p
        where
          p.person_id
        in
        <choose>
            <when test="personIds != null and personIds.size() != 0">
                <foreach collection="personIds" item="id" index="index" separator="," open="(" close=")">
                    #{id}
                </foreach>
            </when>
            <otherwise>
                ()
            </otherwise>
        </choose>
    </select>

    <select id="findByIdCardIndex" resultMap="queryMap">
        select
          p.person_id, p.person_name, p.id_card_number
        from
          person p
        where
          p.id_card_index = #{idCardIndex}
    </select>

    <select id="findPersonNameByPersonId" resultMap="queryMap">
        select
          p.person_id as p_person_id, p.person_name
        from
          person p
        where
          p.person_id = #{personId}
    </select>

    <select id="findAllPersonId" resultType="integer">
        select
          p.person_id as p_person_id
        from
          person p
        order by
          p.person_id
    </select>

    <select id="findAllPersonRole" resultMap="queryMap">
        select
          p.person_id as p_person_id, p.work_role
        from
          person p
        order by
          p.person_id
    </select>

    <select id="findIssuePersonImageInfo" resultMap="queryMap">
        select
          p.person_id as p_person_id, p.person_name, p.head_image, p.work_role, p.id_card_index
        from
          person p
        where
          p.person_id = #{personId}
    </select>

    <select id="getIdCardIndexByPersonId" resultType="string">
        select
          p.id_card_index
        from
          person p
        where
          p.person_id = #{personId}
    </select>

    <select id="searchPerson" resultMap="queryMap">
        select
        <include refid="personInfo"/>
        from
        person p
        <where>
            <if test="personQuery.nameOrIdCard != null ">
                and
                (
                person_name like '%${personQuery.nameOrIdCard}%'
                or
                id_card_number like '%${personQuery.nameOrIdCard}%'
                )
            </if>
            <if test="personQuery.workRole != null">
                and work_role = #{personQuery.workRole}
            </if>
            <if test="personQuery.gender != null ">
                and gender = #{personQuery.gender}
            </if>
            <if test="personQuery.nation != null">
                and nation = #{personQuery.nation}
            </if>
            <if test="personQuery.age != null">
                and gender &gt;= #{personQuery.ageBegin}
                and gender &lt;= #{personQuery.ageEnd}
            </if>
        </where>
    </select>


</mapper>